
/* This code is setup to work by default with S32K144 EVB. */


/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "pin_mux.h"
#include "osif1.h"
#include "dmaController1.h"
#include "clockMan1.h"
#include "adConv1.h"
#include "lpuart1.h"
#include "lpi2c1.h"
#if CPU_INIT_CONFIG
  #include "Init_Config.h"
#endif

volatile int exit_code = 0;

/* User includes (#include below this line is not maintained by Processor Expert) */



/***      POWER SUPPLY      ***/
#define ADC_INSTANCE 	0UL
#define ADC_CHN_C		0U   /* Pin PTA0 connected to the current signal from the power supply */
#define ADC_CHN_V		1U   /* Pin PTA1 connected to the voltage signal from the power supply */

/***  ------------------      GASBOARD      ------------------   ***/
#define TX_BUFFER_SIZE 5U
#define RX_BUFFER_SIZE 16U
#define LPUART_TIMEOUT 100U



/***  ------------------      PRESSURE      ------------------   ***/
#define TRANSFER_SIZE 2U /* Definition of the data transfer size */


/***      POWER SUPPLY      ***/
uint16_t gu16CurrentRawValue;
uint16_t gu16VoltageRawValue;

float gfCurrentValue;
float gfVoltageValue;

/***  ------------------      GASBOARD      ------------------   ***/
float gfO2concentration;
float gfO2flow;
float gfO2temperature;

uint8_t	 TX_buffer[TX_BUFFER_SIZE] = {0x11, 0x02, 0x02, 0x00, 0xEB}; /* Read O2 concentrations on the extended mode (more than X%) */
/* Obs: This must be declared as global, otherwise, change its value and do not work */

/***  ------------------      PRESSURE      ------------------   ***/

uint16_t pressure_hdi_i2c; /* Pressure measured by the HDIB002AUY8P5 sensor through I2C communication in milibars. */
uint8_t buffer[TRANSFER_SIZE]; /* Declaration of the LPI2C transfer buffer */


/*!
 \brief The main function for the project.
 \details The startup initialization sequence is the following:
 * - startup asm routine
 * - main()
 */
int main(void)
{
	/***      POWER SUPPLY      ***/
	/* Enable the floating point unit */
	enableFPU();

	/* Polynomial parameters from data fit */
	const float fVoltagePol[2] = {0.00880332914534114, -0.273383180824596};
	const float fCurrentPol[2] = {0.00169404924302870, -0.0138943629841409};


	/***  ------------------      GASBOARD      ------------------   ***/

	/* Declare bufferS used to store the received data */
	uint8_t	 RX_buffer[RX_BUFFER_SIZE];
	//uint8_t	 TX_buffer[TX_BUFFER_SIZE] = {255, 255,0, 255,255};
	float	 fsigData[10]; /* Stores only the significant bytes of the read data */


	/***  ------------------      PRESSURE      ------------------   ***/
	// Number of counts read by the sensor
	uint16_t counts_hdi; // Would it be better to send a float?


	/* Allocate memory for the LPI2C driver state structure */
	lpi2c_master_state_t lpi2c1MasterState;


	/* Variable used for the loop that initializes the data buffer */
	uint16_t i;



	/*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
#ifdef PEX_RTOS_INIT
	PEX_RTOS_INIT(); /* Initialization of the selected RTOS. Macro is defined by the RTOS component. */
#endif
	/*** End of Processor Expert internal initialization.                    ***/


	/* Initialize and configure clocks
	 * 	-	see clock manager component for details
	 */
	CLOCK_SYS_Init(g_clockManConfigsArr, CLOCK_MANAGER_CONFIG_CNT,
			g_clockManCallbacksArr, CLOCK_MANAGER_CALLBACK_CNT);
	CLOCK_SYS_UpdateConfiguration(0U, CLOCK_MANAGER_POLICY_AGREEMENT);

	/* Initialize pins
	 *	-	See PinSettings component for more info
	 */
	PINS_DRV_Init(NUM_OF_CONFIGURED_PINS, g_pin_mux_InitConfigArr);

	/***      POWER SUPPLY      ***/

	/* Configure ADC instance */
	const adc_converter_config_t adConv1_ConvConfig0 = {
		  .clockDivide = ADC_CLK_DIVIDE_8,
		  .sampleTime = 255U,
		  .resolution = ADC_RESOLUTION_12BIT,
		  .inputClock = ADC_CLK_ALT_1,
		  .trigger = ADC_TRIGGER_SOFTWARE,
		  .pretriggerSel = ADC_PRETRIGGER_SEL_PDB,
		  .triggerSel = ADC_TRIGGER_SEL_PDB,
		  .dmaEnable = false,
		  .voltageRef = ADC_VOLTAGEREF_VREF,
		  .continuousConvEnable = false,
		};

	/* Configure the ADC converter
	 * 	-	See ADC component for the configuration details
	 */
	ADC_DRV_ConfigConverter(ADC_INSTANCE, &adConv1_ConvConfig0);

	adConv1_ChnConfig0.channel = ADC_CHN_C;
	adConv1_ChnConfig1.channel = ADC_CHN_V;


	/***  ------------------      GASBOARD      ------------------   ***/

	/* Baud Rate: 9600, Data Bits: 8, Stop Bits: 1, Parity: No, Flow Control: No */
	  const lpuart_user_config_t lpuart1_InitConfig_Gasboard = {
	    .transferType = LPUART_USING_INTERRUPTS,
	    .baudRate = 9600U, // 2400, 4800, 9600 and 19200 also possible
	    .parityMode = LPUART_PARITY_DISABLED,
	    .stopBitCount = LPUART_ONE_STOP_BIT,
	    .bitCountPerChar = LPUART_8_BITS_PER_CHAR,
	    .rxDMAChannel = 0U,
	    .txDMAChannel = 0U,
	  };


	  /* Initialize LPUART instance */
	  LPUART_DRV_Init(INST_LPUART1, &lpuart1_State, &lpuart1_InitConfig_Gasboard);


	  /***  ------------------      PRESSURE      ------------------   ***/
	  LPI2C_DRV_MasterInit(INST_LPI2C1, &lpi2c1_MasterConfig0, &lpi2c1MasterState);

	 //I2C address of the sensor (0x78)
	 const uint16_t address_ = 120;
	 LPI2C_DRV_MasterSetSlaveAddr(INST_LPI2C1, address_, false); //OBS CHANGE THE BAUD RATE LATER


	   // Parameters to compute the actual pressure based on the number of counts
	   //Pressure range
	   const uint64_t Pmax = 2000; //mbar
	   const uint64_t Pmin = 0;

	   //Digital range
	   const uint64_t Out_max_d = 29490;
	   const uint64_t Out_min_d = 3277;

	   // Check on the datasheet the technical name of this variable
	   uint64_t S;

	   S = (Out_max_d - Out_min_d)/(Pmax-Pmin);

	/* Infinite loop:
	 * 	- Trigger a new conversion
	 * 	- Wait and get the result
	 */

	while (1)
	{

		/***      POWER SUPPLY      ***/

		/* Configure ADC channel and software trigger a conversion */
		ADC_DRV_ConfigChan(ADC_INSTANCE, 0U, &adConv1_ChnConfig0);
		/* Wait for the conversion to be done */
		ADC_DRV_WaitConvDone(ADC_INSTANCE);
		/* Store the channel result into a local variable */
		ADC_DRV_GetChanResult(ADC_INSTANCE, 0U, &gu16CurrentRawValue);

		/* Configure ADC channel and software trigger a conversion */
		ADC_DRV_ConfigChan(ADC_INSTANCE, 0U, &adConv1_ChnConfig1);
		/* Wait for the conversion to be done */
		ADC_DRV_WaitConvDone(ADC_INSTANCE);
		/* Store the channel result into a local variable */
		ADC_DRV_GetChanResult(ADC_INSTANCE, 0U, &gu16VoltageRawValue);

		/* Convert readings to real values */
		gfCurrentValue = gu16CurrentRawValue*fCurrentPol[0] + fCurrentPol[1];
		gfVoltageValue = gu16VoltageRawValue*fVoltagePol[0] + fVoltagePol[1];


		/***  ------------------      GASBOARD      ------------------   ***/

		/* Request Data */
		LPUART_DRV_SendDataBlocking (INST_LPUART1, &TX_buffer, TX_BUFFER_SIZE, LPUART_TIMEOUT);

		/* Receive Data */
		LPUART_DRV_ReceiveDataBlocking(INST_LPUART1, &RX_buffer, RX_BUFFER_SIZE, LPUART_TIMEOUT);

		/* Ignore bits without significant data and convert the others to float */
	    for (uint8_t i = 0; i<RX_BUFFER_SIZE; i++)
	    {
	    	fsigData[i] = (float)RX_buffer[i+4];
	    }

	    /* Compute the characteristics of the flow */
	    gfO2concentration = (fsigData[6]*256 + fsigData[7])/10; //(Vol %)
	    gfO2flow          = (fsigData[8]*256 + fsigData[9])/10; //(L/min)
	    gfO2temperature   = (fsigData[4]*256 + fsigData[5])/10; //(C)




	    /* Clear the buffer to prepare it for the next operation */
	        for (i = 0u; i < TRANSFER_SIZE; i++)
	        {
	            buffer[i] = 0u;
	        }

	        /* Request data from the bus slave */
	        LPI2C_DRV_MasterReceiveDataBlocking(INST_LPI2C1, buffer, TRANSFER_SIZE, true, OSIF_WAIT_FOREVER);

	        delay(50000);

	        // Compute the pressure based on the number of counts read
	        counts_hdi = (buffer[0]<<8)|buffer[1];
	        pressure_hdi_i2c = (counts_hdi - Out_min_d)/S + Pmin;

	        }
	}
	/*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;) {
    if(exit_code != 0) {
      break;
    }
  }
  return exit_code;
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END main */
/*!
 ** @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Processor Expert 10.1 [05.21]
 **     for the Freescale S32K series of microcontrollers.
 **
 ** ###################################################################
 */
